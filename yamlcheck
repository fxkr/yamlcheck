#!/usr/bin/env python2

"""
usage: yamlcheck [-h] [-V] [-q] PATHS [PATHS ...]

Check if files adhere to YAML syntax.

positional arguments:
  PATHS

optional arguments:
  -h, --help     show this help message and exit
  -V, --version  show program's version number and exit
  -q, --quiet
"""

__version__ = '0.1.1'


import argparse
import yaml
import sys


def main():
    par = argparse.ArgumentParser(prog='yamlcheck',
        description='Check if files adhere to YAML syntax.')
    par.add_argument('-V', '--version', action='version', version=__version__)
    par.add_argument('-q', '--quiet', action='store_true')
    par.add_argument('files', metavar='PATHS', type=argparse.FileType('r'), nargs='+')
    args = par.parse_args()

    errors = 0
    for file in args.files:
        try:
            yaml.load(file)
        except yaml.YAMLError as e:
            if not args.quiet:
                if errors:
                    print>>sys.stderr
                print>>sys.stderr, describe(file.name, e)
            errors += 1

    if errors:
        sys.exit(1)


def describe(file_name, yaml_error):
    result = []

    problem = getattr(yaml_error, 'problem', None)
    context = getattr(yaml_error, 'context', None)
    problem_mark = getattr(yaml_error, 'problem_mark', None)
    context_mark = getattr(yaml_error, 'context_mark', None)

    if problem_mark:
        result.append('Error in %s:%s' % (file_name, problem_mark.line+1))
    else:
        result.append('Error in %s:' % (file_name))

    if context:
        if context_mark:
            result.append('  Context: line %s, column %s' %
                (context_mark.line+1, context_mark.column+1))
        else:
            result.append('  Context:')
        result.append('    ' + context)

    if problem:
        if problem_mark:
            result.append('  Problem: line %s, column %s' %
                (problem_mark.line+1, problem_mark.column+1))
        else:
            result.append('  Problem:')
        result.append('    ' + problem)

    return '\n'.join(result)


if __name__ == '__main__':
    main()

